%Enabling Lazy Shadowing for resiliency in extreme-scale computing 
%brings about a number of challenges and design decisions that need to be addressed, including the applicability of this concept to a large number of 
%tasks executing in parallel, and the runtime mechanisms and 
%communications support to ensure efficient interaction between a 
%main and its shadow.
%In the following, we first introduce the basic Lazy Shadowing resilience model. We then %focus on resilience in extreme-scale computing environments, where a large number of %communicating tasks execute in parallel to complete a job. 
%To achieve high tolerance to failure and reduce energy consumption in these environments, we %propose \emph{Leaping Shadows}, an instance of Lazy Shadowing. The main property of the %leaping shadows resilience model is its ability to sustain forward progress in the presence %of failures.
%. referred to as \emph{leaping shadows}, 
%a technique referred to as \emph{shadowed set rejuvenation} to reduce application failure probability, and 
%\emph{leaping shadows}, 
%as an 
%efficient, forward-progress preserving model to achieve high tolerance to failure, while reducing energy consumption, in these environments. 

 %We also discuss the runtime design issues
%related to enabling runtime support to efficiently achieve 
%the expected levels of resilience in extreme-scale systems. 

%This is to test referring Subsection \ref{frame_single}.



%\subsection{Application characteristics}
%\label{frame_app}
%\input{Framework/application}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%\input{Framework/multiple}
The lazy shadowing provides the basis for the design of efficient energy- and power-aware fault-tolerance approaches, that takes the energy-delay tradeoffs of the underlying application into consideration. In this section, we show how lazy shadowing can be used as the basic building block for the design of a resilience models for extreme scale computing environments. The resulting model, referred to as {\it Jumping Shadows}, takes into consideration the main characteristics of tightly-coupled, highly-scalable applications to achieve high-tolerance to failure, while reducing energy consumption, in extreme scale computing environments. In the following, we first introduce the execution and communication model of the targeted applications.  We then  describe the dynamics of the {\it Jumping Shadows} resilience model and discuss important aspects of its implementation. Lastly, we present the Jumping Shadows resilience algorithm.  


\subsection {System model}

We consider the class of compute-intensive, strongly-scaled and tightly-coupled applications, executing on a large-scale multi-core computing infrastructure~\cite{doe_ascr_exascale_2011}. Communication between cores is achieved using low-latency, high-bandwidth interconnect networks, such as Infiniband. 

We use $W$ to denote the size of an application workload, and assume that the workload is split  arbitrarily into a set of tasks, $\tau$, which execute in parallel and are synchronized using barriers. Given the prominence of MPI in HPC environments, we assume message passing as the communication model between tasks. Based on this model, each pair of communicating tasks is associated with a logical first-in-first-out  (FIFO) channel, which guarantees ordered delivery of messages.

Assuming that each task is assigned to execute on a core at a maximum speed $\sigma=1$, the failure-free completion time of the application is $w = W/|\tau|$. When a failure occurs, the non-failing tasks continue executing until they reach their synchronization barrier. These tasks remain idle until the failure recovery is complete. The main objective of the Leaping Shadows resilience model is to minimize the idle time induced by failures and ensure forward progress by rolling-forward shadows during the recovery phase.  

\subsection {Leaping Shadows Model}

The execution of an application can be carried out by simultaneously running all main and shadow processes for all the tasks. Let $M(i)$ denote the main process executing the $i^{th}$ task $T(i)$ of the application, and $S(i)$ its associated shadow. The task execution is divided into a set of execution phases, each extending over a synchronization interval. In the absence of failure, the behavior of a main  and its leaping shadow is identical to the behavior of a main and its lazy shadow, depicted in Figure \ref{fig:sync}. Figure~\ref{fig:leap} shows the behavior of the main processes and their associated leaping shadows, upon the occurrence of a failure at time $t_f$. Figure~\ref{fig:leap}(a) depicts the execution dynamics of a failing main and its associated shadow. Upon failure of the main process, the associated shadow continues execution, but at a higher rate, until it reaches its synchronization barrier at time $t_r$. 


\begin{figure}[!t]
	\begin{center}
			\includegraphics[width=0.8\columnwidth]{Figures/jump.pdf}
	\end{center}
	%\vskip -0.25in
	\caption{The concept of Leaping Shadows.}
	\label{fig:leap}
\end{figure}

Figure~\ref{fig:leap}(b) illustrates the behavior of the remaining main processes and their associated shadows. Unaware of the failed process, the remaining main processes continue executing until they reach their synchronization barriers at time $t_{sync}$. While the shadow of the failed main process progresses toward its synchronization barrier, all remaining main processes become idle until time $t_r$. It is worth noting that, given the tightly-coupled and strongly-scaled nature of the application,  synchronization points occur frequently. Consequently, the time between synchronization points is very small relative to the total execution time of the application. Therefore, if one main, M(i), fails at 
time $t_f$, the remaining main processes will reach their synchronization point, shortly after the failure, specifically at at time $t_{sync} = t_f +\epsilon$, 
where $\epsilon \approxeq 0$. The Leaping Shadows model opportunistically take advantage of the idle time, induced by the failure recovery process, to {\it leap forward} all shadows associated with the non-failing main processes, thereby saving execution time and energy, and guaranteeing forward progress. 
All processes resume execution, after the shadow of the failing main reaches its synchronization barrier. This process continues until the completion of all tasks. The basic steps describing the execution of an application are depicted in Algorithm 1.

\begin{algorithm}[t]
  \SetKwInOut{Input}{input}
  \SetKwInOut{Output}{output}
  \caption{Lazy Shadowing}
  \Input{$W, M, S$}
  \Output{Application execution status}
  \BlankLine
  split $W$ into $M$ tasks\; \nllabel{line:split} 
  cluster $M$ tasks into $S$ shadowed sets\; \nllabel{line:cluster} 
  %$T_l \leftarrow T+t_{now}$\;%, $C_{vul} \gets 0$
  start M(i) and S(i) for each task T(i)\;
    \While{execution not done}
    {
        \If{failure detected in shadowed set SS(j)} %\nllabel{line:if_start_1} 
        {
            \nllabel{line:if_start_1} 
            \eIf{SS(j) is vulnerable}
            {
                notify ``Application failure"\;
                terminate all mains and shadows\;
                repair all failures\;
                \emph{Restart execution}\; %\Comment{re-execution}
            }
            {
                mark SS(j) as vulnerable\;
                %\State $C_{vul} \gets C_{vul} + 1$
                %\If{$C_{vul} == V$}
                %    \State perform shadowed set rejuvenation   
                %\EndIf 
                \If{failure happened to a main M(k)} 
                {
                    promote S(k) to M(k)\;
                    perform shadow leaping\; %failure induced shadow leaping
                    %$T_l \leftarrow T+t_{now}$\;
                }
            }
        }  
        \nllabel{line:if_end_1}
        %\If{$t_{now} \ge T_l$} %
        %{
        %    \nllabel{line:if_start_2} 
        %    perform shadow leaping\;
        %    $T_l \leftarrow T+t_{now}$\;
        %    \nllabel{line:if_end_2}
        %} % 
        %\nllabel{line:if_end_2}
    }
    output ``Application completes"\;
  \label{al:ls}
\end{algorithm}


The total workload is split into $M$ parallel tasks (line~\ref{line:split}), which are executed simultaneously by $M$ main processes and $M$ shadow processes. The $M$ shadows are then clustered into $S$ groups, each containing $\alpha=M/S$ shadows. 
During the execution of the application,
the system runs a failure monitor that triggers corresponding actions when a failure is detected (line~\ref{line:if_start_1} to~\ref{line:if_end_1}). A failure may trigger different actions, depending on its type and precedence with respect to other failures.  A shadowed set becomes {\it vulnerable} after the occurrence of the first failure. A failure occurring in a vulnerable shadowed set (SS(j)), results in an application failure. In response, the system terminates all running 
processes, initiates a recovery phase, either by rebooting or replacing failing cores,  and restarts execution. %(this assumes that checkpointing is not used). 
On the other hand, failure in a non-vulnerable shadowed set
can be overcome through lazy shadowing and does not translate into application failure. In this case, the shadowed set in question (SS(j)) is marked as vulnerable. Note, however, that a failure in a non-vulnerable shadowed set, can be caused by the failure of a main process or its associated shadow.  While a shadow 
failure does not impact the normal execution of the main processes, and thus can be ignored, failure of the main process forces the remaining main processes to suspend execution after they reach their synchronization point.  The shadow process, S(k), associated with a failing process, M(k),  becomes the primary process of the associated task and increases its execution to the maximum rate. This, in turn, forces the termination of all other colocated processes.  Simultaneously, a forward leaping process is undertaken by all remaining shadows to align their states with that of their associated mains.  
This process continues until the application is successfully completed.

\subsection{Leaping Shadows Implementation Issues}

\paragraph{Shadow Colocation} To control the leaping shadows execution rates, collocation is used. To execute an application with $M$ tasks, $M+S$ cores are required, where $M$ is a multiple of $S$, all executing at the maximum rate. $M$ of these cores are allocated to the main processes while the remaining $S$ cores are shared among their associated shadows. Each main process is allocated one core, while $\alpha=M/S$ shadows are collocated on a single core. $\alpha$ is referred to as the main to shadow ratio. For example, if $M=9$ and $S=3$, then the 9 shadows execute on 3 cores, with every $\alpha=3$ shadows executing on a core (Figure~\ref{fig:sc_mapping}).
  
Collocation of $\alpha$ shadows on a core has an important ramification with respect to the resilience of the system. Specifically, to speed up a shadow 
of a failed main to the maximum rate, all other collocated shadows must be terminated. Consequently, a second failure in any of the mains of the terminated shadows cannot be tolerated. In other words, the $M+S$ cores are grouped into $S$ sets, which we call \emph{shadowed sets}, each containing $\alpha+1$ cores with $\alpha$ mains executing on $\alpha$ cores (referred to as main cores) and their corresponding $\alpha$ shadows collocated on one core (referred to as shadow core). Each shadowed set can tolerate a failure in any of its cores, since failure of a main core would be tolerated by the shadow core and failure of the shadow core will not affect any mains. After the first failure in a shadowed set, the set is called \emph{vulnerable} because it cannot tolerate another failure. %In the following subsection, we will discuss a rejuvenation scheme that deals with vulnerable shadowed sets.

\begin{figure}[!t]
	\begin{center}
		\includegraphics[width=\columnwidth]{Figures/sc_mapping.pdf}
	\end{center}
	%\vskip -0.25in 
	\caption{An example of collocation. $N=12$, $M=9$, $S=3$, and $\alpha=3$.}
	\label{fig:sc_mapping}
\end{figure}




%\subsection{Shadowed set rejuvenation}
%\label{frame_reju}
%\input{Framework/reju}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\paragraph{State consistency}

State consistency is required both during normal execution and following a failure of a main process to roll-forward the state of the leaping shadows. During normal execution, shadows remain mute, in the sense that 
all outgoing messages from shadows are suppressed. 
A shadow process, however, will typically lag behind its main process during execution. Therefore, it is necessary to ensure that the shadow's state is consistent with that of its associated main, to successfully complete its associated task in case of failure. To this end, a message-logging protocol is used to ensure consistency~\cite{Marz}. These protocols typically use a minimum amount of meta-information to store and replicate the non-deterministic decisions in the execution of an application.  These meta-data, also called determinants, are exchanged through system-level messages. To provide correct recovery after failure, 
a mechanism is required to guarantee that every shadow process follows the same computation and communication steps as its main process. 
After a main process M(i) fails, S(i) will take over M(i)'s role to recover from this failure. If there are other shadows sharing the same core with S(i), they will be terminated and S(i) will start consuming the messages in its receiver-side message log at a faster speed. The message logging protocol will ensure that shadow S(i) reaches a consistent state with the rest of the system. 

Upon failure of a main processes, all shadow processes must update their address space to ``catch up" with their associated non-failing main processes. A technology, such as remote direct memory access (RDMA), to roll-forward the state of the shadow to be consistent with that of its associated main. Rather than copying data to the buffers of the operating system, RDMA enables the network adapter to transfer data directly from the main process to its shadow. The zero-copy networking feature of RDMA considerably reduces latency, thereby enabling fast transfer of data between the main and its shadow.

 


